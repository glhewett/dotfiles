" do not connect to x server
set clipboard=exclude:.*

set modelines=1
set modeline
set nowrap
set nofoldenable

nnoremap <C-j> <C-w>j
nnoremap <C-k> <C-w>k
nnoremap <C-h> <C-w>h
nnoremap <C-l> <C-w>l

let g:netrw_banner = 0

command! -nargs=* Wrap set wrap linebreak nolist tw=0

" Append modeline after last line in buffer.
" Use substitute() instead of printf() to handle '%%s' modeline in LaTeX
" files.
function! AppendModeline()
  let l:modeline = printf(" vim: set ts=%d sw=%d tw=%d %set :",
        \ &tabstop, &shiftwidth, &textwidth, &expandtab ? '' : 'no')
  let l:modeline = substitute(&commentstring, "%s", l:modeline, "")
  call append(line("$"), l:modeline)
endfunction

nnoremap <silent> <Leader>ml :call AppendModeline()<CR>
function! LinterStatus() abort
    let l:counts = ale#statusline#Count(bufnr(''))

    let l:all_errors = l:counts.error + l:counts.style_error
    let l:all_non_errors = l:counts.total - l:all_errors

    return l:counts.total == 0 ? 'OK' : printf(
    \   '%dW %dE',
    \   all_non_errors,
    \   all_errors
    \)
endfunction

set statusline+=%#warningmsg#
set statusline+=%{LinterStatus()}
set statusline+=%*

" configure lightline
set noshowmode
let g:lightline = {
      \ 'colorscheme': 'wombat',
      \   'active': {
      \     'left': [ [ 'mode', 'paste' ],
      \               [ 'gitbranch', 'readonly', 'filename', 'modified' ] ]
      \   },
      \   'component_function': {
      \     'gitbranch': 'FugitiveHead'
      \   },
      \ }
" end configure lightline

autocmd FileType markdown setlocal spell wrap linebreak tabstop=4 shiftwidth=4 textwidth=0 expandtab nolist nofoldenable nonumber
autocmd FileType ruby setlocal nospell nowrap nolinebreak tabstop=2 shiftwidth=2 textwidth=0 expandtab list nofoldenable number
autocmd FileType html setlocal nospell nowrap nolinebreak tabstop=2 shiftwidth=2 textwidth=0 expandtab list nofoldenable number
autocmd FileType swift setlocal nowrap nolinebreak tabstop=4 shiftwidth=4 textwidth=0 expandtab nolist foldenable number
autocmd FileType yaml setlocal nowrap nolinebreak tabstop=2 shiftwidth=2 textwidth=0 expandtab nolist foldenable number
autocmd FileType rust setlocal nowrap nolinebreak tabstop=4 shiftwidth=4 textwidth=0 expandtab nolist foldenable number
autocmd FileType toml setlocal nowrap nolinebreak tabstop=4 shiftwidth=4 textwidth=0 expandtab nolist foldenable number
autocmd FileType cpp setlocal nowrap nolinebreak tabstop=2 shiftwidth=2 textwidth=0 expandtab list nofoldenable number
autocmd FileType vim setlocal nowrap nolinebreak tabstop=2 shiftwidth=2 textwidth=0 expandtab list nofoldenable number

" configure rust
let g:rustfmt_autosave = 1

" configure cpp
autocmd BufNewFile .projections.json 0r ~/.skeletons/projections.json
autocmd BufNewFile CMakeLists.txt 0r ~/.skeletons/CMakeLists.txt
autocmd BufNewFile *.cpp 0r ~/.skeletons/cpp.cpp
autocmd BufNewFile *.hpp 0r ~/.skeletons/cpp.hpp
" end configure cpp

" configure vim format
:nnoremap <leader>ev :vsplit $MYVIMRC.local<cr>
:nnoremap <leader>rv :source $MYVIMRC.local<cr>
" end configure vim format

" configure colors
colorscheme Tomorrow-Night
" end configure colors

set tags=./tags;/

" reformatting code
function! Format() abort
    :echo "hello, world!"
endfunction
nnoremap <silent> <Leader>f :call Format()<CR>
command Format :call Format()<CR>

" Codeium
"let g:codeium_disable_bindings = 1
"let g:codeium_manual = v:true

" Copilot

